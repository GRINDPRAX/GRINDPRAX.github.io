import { loadTelegramConfig, validateTelegramConfig } from "./telegramConfig";

export interface AppConfig {
  server: {
    port: number;
    host: string;
    environment: "development" | "production" | "test";
  };
  telegram: ReturnType<typeof loadTelegramConfig>;
  features: {
    enableTelegram: boolean;
    enableAuth: boolean;
    enableMatchNotifications: boolean;
  };
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
export function loadAppConfig(): AppConfig {
  const telegramConfig = loadTelegramConfig();

  return {
    server: {
      port: parseInt(process.env.PORT || "8080"),
      host: process.env.HOST || "0.0.0.0",
      environment: (process.env.NODE_ENV as any) || "development",
    },

    telegram: telegramConfig,

    features: {
      enableTelegram:
        !!telegramConfig.token &&
        telegramConfig.token !== "YOUR_BOT_TOKEN_HERE",
      enableAuth: process.env.TELEGRAM_AUTH !== "false",
      enableMatchNotifications: process.env.TELEGRAM_NOTIFICATIONS !== "false",
    },
  };
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export function validateAppConfig(config: AppConfig): {
  isValid: boolean;
  errors: string[];
  warnings: string[];
} {
  const errors: string[] = [];
  const warnings: string[] = [];

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  if (config.server.port < 1 || config.server.port > 65535) {
    errors.push("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞");
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram
  if (config.features.enableTelegram) {
    const telegramValidation = validateTelegramConfig(config.telegram);
    if (!telegramValidation.isValid) {
      errors.push(...telegramValidation.errors);
    }
  } else {
    warnings.push("Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω");
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.NODE_ENV) {
    warnings.push("NODE_ENV –Ω–µ —ÉÔøΩÔøΩ—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'development'");
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings,
  };
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export function displayConfigStatus(config: AppConfig): void {
  console.log("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:");
  console.log(`   üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${config.server.environment}`);
  console.log(`   üö™ –ü–æ—Ä—Ç: ${config.server.port}`);
  console.log(`   üì° –•–æ—Å—Ç: ${config.server.host}`);

  console.log("\nü§ñ Telegram –±–æ—Ç:");
  console.log(
    `   ‚úÖ –í–∫–ª—é—á–µ–Ω: ${config.features.enableTelegram ? "–î–∞" : "–ù–µ—Ç"}`,
  );
  console.log(
    `   üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${config.features.enableAuth ? "–î–∞" : "–ù–µ—Ç"}`,
  );
  console.log(
    `   üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${config.features.enableMatchNotifications ? "–î–∞" : "–ù–µ—Ç"}`,
  );

  if (config.features.enableTelegram) {
    console.log(
      `   üîë –¢–æ–∫–µ–Ω: ${config.telegram.token ? "–ù–∞—Å—Ç—Ä–æ–µ–Ω" : "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}`,
    );
    console.log(
      `   üì∫ –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${config.telegram.notificationChatId || "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}`,
    );
    console.log(
      `   üõ°Ô∏è –ê–¥–º–∏–Ω –∫–∞–Ω–∞–ª: ${config.telegram.adminChatId || "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}`,
    );
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  const validation = validateAppConfig(config);

  if (validation.warnings.length > 0) {
    console.log("\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:");
    validation.warnings.forEach((warning) => console.log(`   - ${warning}`));
  }

  if (validation.errors.length > 0) {
    console.log("\n‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:");
    validation.errors.forEach((error) => console.log(`   - ${error}`));
  }

  console.log("");
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
export function getEnvDebugInfo(): Record<string, string> {
  const debugVars = [
    "NODE_ENV",
    "PORT",
    "HOST",
    "TELEGRAM_BOT_TOKEN",
    "TELEGRAM_CHAT_ID",
    "TELEGRAM_ADMIN_CHAT_ID",
    "TELEGRAM_BOT_USERNAME",
    "TELEGRAM_NOTIFICATIONS",
    "TELEGRAM_AUTH",
    "TELEGRAM_AUTO_CREATE_USERS",
  ];

  const debugInfo: Record<string, string> = {};

  debugVars.forEach((varName) => {
    const value = process.env[varName];
    if (value) {
      // –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      if (varName.includes("TOKEN") && value.length > 10) {
        debugInfo[varName] =
          `${value.substring(0, 8)}...${value.substring(value.length - 4)}`;
      } else {
        debugInfo[varName] = value;
      }
    } else {
      debugInfo[varName] = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ";
    }
  });

  return debugInfo;
}

// –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export const appConfig = loadAppConfig();
export default appConfig;
