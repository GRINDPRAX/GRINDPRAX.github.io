import { TelegramBotConfig } from "../telegramBot";

export interface AppTelegramConfig extends TelegramBotConfig {
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  botUsername?: string;
  welcomeMessage?: string;
  errorMessages: {
    userNotFound: string;
    loginFailed: string;
    serverError: string;
    unauthorized: string;
  };
  features: {
    autoRegistration: boolean;
    profileManagement: boolean;
    matchNotifications: boolean;
    adminCommands: boolean;
    statistics: boolean;
  };
  limits: {
    messageLength: number;
    commandCooldown: number;
    maxRetries: number;
  };
  channels: {
    general?: string;
    announcements?: string;
    matches?: string;
    admin?: string;
  };
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export const defaultTelegramConfig: AppTelegramConfig = {
  token: process.env.TELEGRAM_BOT_TOKEN || "",
  notificationChatId: process.env.TELEGRAM_CHAT_ID || "",
  adminChatId: process.env.TELEGRAM_ADMIN_CHAT_ID || "",
  webhookUrl: process.env.TELEGRAM_WEBHOOK_URL,
  enableNotifications: true,
  enableAuth: true,
  autoCreateUsers: true,

  botUsername: process.env.TELEGRAM_BOT_USERNAME || "",
  welcomeMessage: `
üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–∞!</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
‚Ä¢ üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º–∏ –º–∞—Ç—á–∞–º–∏  
‚Ä¢ üèÜ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–≥—Ä–∞—Ö
‚Ä¢ ‚öôÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É!`,

  errorMessages: {
    userNotFound: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.",
    loginFailed: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    serverError: "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    unauthorized: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
  },

  features: {
    autoRegistration: process.env.TELEGRAM_AUTO_REGISTRATION === "true",
    profileManagement: true,
    matchNotifications: true,
    adminCommands: process.env.TELEGRAM_ADMIN_COMMANDS === "true",
    statistics: true,
  },

  limits: {
    messageLength: 4096,
    commandCooldown: 1000, // –º—Å
    maxRetries: 3,
  },

  channels: {
    general: process.env.TELEGRAM_GENERAL_CHANNEL,
    announcements: process.env.TELEGRAM_ANNOUNCEMENTS_CHANNEL,
    matches:
      process.env.TELEGRAM_MATCHES_CHANNEL || process.env.TELEGRAM_CHAT_ID,
    admin: process.env.TELEGRAM_ADMIN_CHANNEL,
  },
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
export function loadTelegramConfig(): AppTelegramConfig {
  return {
    ...defaultTelegramConfig,
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ environment variables –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    token: process.env.TELEGRAM_BOT_TOKEN || defaultTelegramConfig.token,
    notificationChatId:
      process.env.TELEGRAM_CHAT_ID || defaultTelegramConfig.notificationChatId,
    adminChatId:
      process.env.TELEGRAM_ADMIN_CHAT_ID || defaultTelegramConfig.adminChatId,
    webhookUrl:
      process.env.TELEGRAM_WEBHOOK_URL || defaultTelegramConfig.webhookUrl,
    enableNotifications:
      process.env.NODE_ENV === "production"
        ? process.env.TELEGRAM_NOTIFICATIONS !== "false"
        : process.env.TELEGRAM_NOTIFICATIONS === "true",
    enableAuth: process.env.TELEGRAM_AUTH !== "false",
    autoCreateUsers: process.env.TELEGRAM_AUTO_CREATE_USERS !== "false",
  };
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export function validateTelegramConfig(config: AppTelegramConfig): {
  isValid: boolean;
  errors: string[];
} {
  const errors: string[] = [];

  if (!config.token || config.token.length < 10) {
    errors.push("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TELEGRAM_BOT_TOKEN");
  }

  if (
    config.enableNotifications &&
    (!config.notificationChatId || config.notificationChatId.trim() === "")
  ) {
    errors.push(
      "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω TELEGRAM_CHAT_ID –∏–ª–∏ TELEGRAM_NOTIFICATION_CHAT_ID",
    );
  }

  if (config.limits.messageLength > 4096) {
    errors.push(
      "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 4096 —Å–∏–º–≤–æ–ª–æ–≤",
    );
  }

  if (config.limits.commandCooldown < 100) {
    errors.push("–ö—É–ª–¥–∞—É–Ω –∫–æ–º–∞–Ω–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 100–º—Å");
  }

  return {
    isValid: errors.length === 0,
    errors,
  };
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export function getTelegramConfigForEnvironment(
  env: "development" | "production" | "test",
): Partial<AppTelegramConfig> {
  const baseConfig = loadTelegramConfig();

  switch (env) {
    case "development":
      return {
        enableNotifications: baseConfig.enableNotifications,
        limits: {
          ...defaultTelegramConfig.limits,
          commandCooldown: 500,
        },
      };
    case "production":
      return {
        enableNotifications: true,
        limits: {
          ...defaultTelegramConfig.limits,
          commandCooldown: 2000,
        },
      };
    case "test":
      return {
        enableNotifications: false,
        enableAuth: false,
        autoCreateUsers: false,
      };
    default:
      return {};
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export type TelegramFeatures = AppTelegramConfig["features"];
export type TelegramLimits = AppTelegramConfig["limits"];
export type TelegramChannels = AppTelegramConfig["channels"];
export type TelegramErrorMessages = AppTelegramConfig["errorMessages"];
