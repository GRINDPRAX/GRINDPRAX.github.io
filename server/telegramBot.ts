import TelegramBot from "node-telegram-bot-api";
import {
  getUserByTelegramId,
  createUser,
  updateUser,
  getAllUsers,
} from "./database";
import { userToProfile } from "./database";
import { createSession } from "./middleware";
import { generateTelegramLoginToken } from "./routes/auth";

export interface TelegramBotConfig {
  token: string;
  notificationChatId?: string;
  adminChatId?: string;
  webhookUrl?: string;
  enableNotifications: boolean;
  enableAuth: boolean;
  autoCreateUsers: boolean;
}

export class TelegramBotService {
  private bot: TelegramBot | null = null;
  private config: TelegramBotConfig;
  private authSessions: Map<number, { code: string; expires: number }> =
    new Map();

  constructor(config: TelegramBotConfig) {
    this.config = config;
    if (config.token && config.token !== "YOUR_BOT_TOKEN_HERE") {
      this.initializeBot();
    }
  }

  private initializeBot() {
    try {
      this.bot = new TelegramBot(this.config.token, { polling: true });
      this.setupCommands();
      this.setupHandlers();
      console.log("‚úÖ Telegram bot initialized successfully");
    } catch (error) {
      console.error("‚ùå Failed to initialize Telegram bot:", error);
    }
  }

  private setupCommands() {
    if (!this.bot) return;

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    this.bot.setMyCommands([
      { command: "start", description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º" },
      { command: "login", description: "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" },
      { command: "profile", description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" },
      { command: "matches", description: "–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏" },
      { command: "help", description: "–ü–æ–º–æ—â—å" },
      { command: "settings", description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞" },
    ]);
  }

  private setupHandlers() {
    if (!this.bot) return;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from?.id;

      if (!userId) return;

      const welcomeMessage = `
üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–∞!</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
‚Ä¢ üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º–∏ –º–∞—Ç—á–∞–º–∏
‚Ä¢ üèÜ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–ºÔøΩÔøΩ–µ–Ω–∏—è –æ –∏–≥—Ä–∞—Ö
‚Ä¢ ‚öôÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/login - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/matches - –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/help - –ü–æ–º–æ—â—å

–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É!`;

      await this.sendMessage(chatId, welcomeMessage);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /login
    this.bot.onText(/\/login/, async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from?.id;
      const username = msg.from?.username;
      const firstName = msg.from?.first_name || "";
      const lastName = msg.from?.last_name || "";

      if (!userId) return;

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        let user = getUserByTelegramId(userId.toString());

        if (!user && this.config.autoCreateUsers) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          const nickname =
            username || `${firstName} ${lastName}`.trim() || `User${userId}`;

          user = createUser({
            email: `telegram_${userId}@telegram.user`,
            nickname,
            password: "telegram_auth",
            avatar: "",
            banner: "",
            telegramId: userId.toString(),
            rating: 1000,
            kills: 0,
            deaths: 0,
            kd: 0,
            registrationDate: new Date().toISOString(),
            status: "–ò–≥—Ä–æ–∫",
            level: 1,
            wins: 0,
            losses: 0,
            totalMatches: 0,
            lastLogin: new Date().toISOString(),
          });

          await this.sendMessage(
            chatId,
            `
‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω!</b>

üéÆ <b>–ù–∏–∫–Ω–µ–π–º:</b> ${user.nickname}
‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> ${user.rating}
üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> ${new Date().toLocaleDateString("ru-RU")}

–î–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link`,
          );
        } else if (!user) {
          await this.sendMessage(
            chatId,
            `
‚ùå <b>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.`,
          );
          return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞
        const loginToken = generateTelegramLoginToken(userId.toString());
        const loginUrl = `http://evo-faceit.ru/auth?loginToken=${loginToken}`;

        const keyboard = {
          inline_keyboard: [
            [{ text: "üåê –í–æ–π—Ç–∏ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é", url: loginUrl }],
            [{ text: "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data: "show_stats" }],
          ],
        };

        await this.sendMessage(
          chatId,
          `
üîê <b>–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞</b>

üëã –ü—Ä–∏–≤–µ—Ç, ${user.nickname}!

üîó <b>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 5 –º–∏–Ω—É—Ç</b>
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏—é:

‚ö†Ô∏è <i>–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–∏–º –ª—é–¥—è–º!</i>`,
          keyboard,
        );
      } catch (error) {
        console.error("Login error:", error);
        await this.sendMessage(
          chatId,
          "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
    this.bot.onText(/\/profile/, async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from?.id;

      if (!userId) return;

      const user = getUserByTelegramId(userId.toString());

      if (!user) {
        await this.sendMessage(
          chatId,
          "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.",
        );
        return;
      }

      const profileMessage = `
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å: ${user.nickname}</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${user.rating}
üèÜ –ü–æ–±–µ–¥: ${user.wins}
üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${user.losses}
üéØ K/D: ${user.kd.toFixed(2)}
üíÄ –£–±–∏–π—Å—Ç–≤: ${user.kills}
‚ò†Ô∏è –°–º–µ—Ä—Ç–µ–π: ${user.deaths}
üéÆ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: ${user.totalMatches}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.registrationDate).toLocaleDateString("ru-RU")}
üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${user.lastLogin ? new Date(user.lastLogin).toLocaleDateString("ru-RU") : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}

üé™ <b>–°—Ç–∞—Ç—É—Å:</b> ${user.status}
üèÖ <b>–£—Ä–æ–≤–µ–Ω—å:</b> ${user.level}`;

      await this.sendMessage(chatId, profileMessage);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /matches (–±—É–¥–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∞—Ç—á–µ–π)
    this.bot.onText(/\/matches/, async (msg) => {
      const chatId = msg.chat.id;

      // –ó–¥–µ—Å—å –±—ÉÔøΩÔøΩ–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∞—Ç—á–µ–π
      await this.sendMessage(
        chatId,
        `
üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏</b>

üîÑ <i>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∞—Ç—á–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>

–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –≤–µ–±-—Å–∞–π—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É—á–∞—Å—Ç–∏—è –≤ –º–∞—Ç—á–∞—Ö.`,
      );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
    this.bot.onText(/\/settings/, async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from?.id;

      if (!userId) return;

      const user = getUserByTelegramId(userId.toString());

      if (!user) {
        await this.sendMessage(
          chatId,
          "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.",
        );
        return;
      }

      const keyboard = {
        inline_keyboard: [
          [
            { text: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data: "settings_notifications" },
            { text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data: "settings_profile" },
          ],
          [
            { text: "üéÆ –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data: "settings_game" },
            { text: "‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data: "settings_close" },
          ],
        ],
      };

      await this.sendMessage(
        chatId,
        `
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:`,
        keyboard,
      );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;

      const helpMessage = `
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/login - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/matches - –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>
‚Ä¢ üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö
‚Ä¢ ‚öôÔ∏è –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ üéÆ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∞—Ç—á–µ–π

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.`;

      await this.sendMessage(chatId, helpMessage);
    });

    // –û–±—Ä–∞–±–æ—Ç—áÔøΩÔøΩ–∫ callback-–∫–Ω–æ–ø–æ–∫
    this.bot.on("callback_query", async (callbackQuery) => {
      const msg = callbackQuery.message;
      const data = callbackQuery.data;
      const chatId = msg?.chat.id;

      if (!chatId || !data) return;

      try {
        await this.bot!.answerCallbackQuery(callbackQuery.id);

        switch (data) {
          case "settings_notifications":
            await this.sendMessage(
              chatId,
              `
üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–≥—Ä
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö`,
            );
            break;

          case "settings_profile":
            await this.sendMessage(
              chatId,
              `
üë§ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
–í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω—è—Ç—å:
‚Ä¢ –ù–∏–∫–Ω–µ–π–º
‚Ä¢ –°—Ç–∞—Ç—É—Å
‚Ä¢ –ê–≤–∞—Ç–∞—Ä`,
            );
            break;

          case "settings_game":
            await this.sendMessage(
              chatId,
              `
üéÆ <b>–ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>

–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:
‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Ä–µ–∂–∏–º—ã –∏–≥—Ä—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
‚Ä¢ –êÔøΩÔøΩ—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –º–∞—Ç—á–∞—Ö`,
            );
            break;

          case "settings_close":
            await this.bot!.deleteMessage(chatId, msg!.message_id);
            break;
        }
      } catch (error) {
        console.error("Callback query error:", error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    this.bot.on("error", (error) => {
      console.error("Telegram bot error:", error);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ–ø—Ä–æ—Å–∞
    this.bot.on("polling_error", (error) => {
      console.error("Telegram polling error:", error);
    });
  }

  private async sendMessage(
    chatId: number,
    text: string,
    replyMarkup?: any,
  ): Promise<boolean> {
    if (!this.bot) return false;

    try {
      await this.bot.sendMessage(chatId, text, {
        parse_mode: "HTML",
        reply_markup: replyMarkup,
      });
      return true;
    } catch (error) {
      console.error("Failed to send message:", error);
      return false;
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async notifyGameStarted(
    matchName: string,
    players: string[],
    teamSize: number,
  ): Promise<boolean> {
    if (!this.config.enableNotifications || !this.config.notificationChatId)
      return false;

    const playersText = players.length > 0 ? players.join(", ") : "–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤";
    const message = `
üéÆ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>

üìã <b>–ú–∞—Ç—á:</b> ${matchName}
üë• <b>–§–æ—Ä–º–∞—Ç:</b> ${teamSize}v${teamSize}
üéØ <b>–ò–≥—Ä–æ–∫–∏:</b> ${playersText}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString("ru-RU")}

üî¥ –ú–∞—Ç—á —Å–µ–π—á–∞—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!`;

    return await this.sendNotification(message);
  }

  async notifyGameFinished(
    matchName: string,
    teamAScore: number,
    teamBScore: number,
    teamA: string[],
    teamB: string[],
  ): Promise<boolean> {
    if (!this.config.enableNotifications || !this.config.notificationChatId)
      return false;

    const winner =
      teamAScore > teamBScore
        ? "–ö–æ–º–∞–Ω–¥–∞ –ê"
        : teamBScore > teamAScore
          ? "–ö–æ–º–∞–Ω–¥–∞ –ë"
          : "–ù–∏—á—å—è";
    const teamAText = teamA.length > 0 ? teamA.join(", ") : "–ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞";
    const teamBText = teamB.length > 0 ? teamB.join(", ") : "–ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞";

    const message = `
üèÜ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìã <b>–ú–∞—Ç—á:</b> ${matchName}
üìä <b>–°—á–µ—Ç:</b> ${teamAScore} : ${teamBScore}
üëë <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b> ${winner}

üë• <b>–ö–æ–º–∞–Ω–¥–∞ –ê:</b> ${teamAText}
üë• <b>–ö–æ–º–∞–Ω–¥–∞ –ë:</b> ${teamBText}

‚è∞ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> ${new Date().toLocaleString("ru-RU")}`;

    return await this.sendNotification(message);
  }

  async notifyPlayerJoined(
    matchName: string,
    playerName: string,
    currentPlayers: number,
    maxPlayers: number,
  ): Promise<boolean> {
    if (!this.config.enableNotifications || !this.config.notificationChatId)
      return false;

    const message = `
üë§ <b>–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!</b>

üìã <b>–ú–∞—Ç—á:</b> ${matchName}
üéÆ <b>–ò–≥—Ä–æ–∫:</b> ${playerName}
üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> ${currentPlayers}/${maxPlayers}

${currentPlayers >= maxPlayers ? "‚úÖ <b>–ú–∞—Ç—á –∑–∞–ø–æ–ª–Ω–µ–Ω! –ò–≥—Ä–∞ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å—Å—è!</b>" : "‚è≥ –û–∂–∏–¥–∞–µ–º –µ—â–µ –∏–≥—Ä–æ–∫–æ–≤..."}`;

    return await this.sendNotification(message);
  }

  async sendNotification(message: string): Promise<boolean> {
    if (!this.bot || !this.config.notificationChatId) return false;

    try {
      const chatId = this.config.notificationChatId.startsWith("@")
        ? this.config.notificationChatId
        : parseInt(this.config.notificationChatId);

      await this.bot.sendMessage(chatId, message, { parse_mode: "HTML" });
      return true;
    } catch (error) {
      console.error("Failed to send notification:", error);
      return false;
    }
  }

  async testConnection(): Promise<boolean> {
    const message = `
üîß <b>–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!
‚è∞ ${new Date().toLocaleString("ru-RU")}`;

    return await this.sendNotification(message);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
  isConnected(): boolean {
    return this.bot !== null;
  }

  updateConfig(newConfig: Partial<TelegramBotConfig>) {
    this.config = { ...this.config, ...newConfig };

    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    if (newConfig.token && newConfig.token !== this.config.token) {
      this.stop();
      this.config.token = newConfig.token;
      this.initializeBot();
    }
  }

  stop() {
    if (this.bot) {
      this.bot.stopPolling();
      this.bot = null;
      console.log("üõë Telegram bot stopped");
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ WebApp
  getWebAppAuthUrl(): string {
    return `https://t.me/${this.bot?.options.username || "your_bot"}?start=auth`;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ÔøΩÔøΩ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  generateAuthCode(telegramUserId: number): string {
    const code = Math.random().toString(36).substring(2, 15);
    const expires = Date.now() + 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

    this.authSessions.set(telegramUserId, { code, expires });

    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π
    setTimeout(
      () => {
        this.authSessions.delete(telegramUserId);
      },
      5 * 60 * 1000,
    );

    return code;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  validateAuthCode(telegramUserId: number, code: string): boolean {
    const session = this.authSessions.get(telegramUserId);

    if (!session || session.expires < Date.now()) {
      this.authSessions.delete(telegramUserId);
      return false;
    }

    if (session.code === code) {
      this.authSessions.delete(telegramUserId);
      return true;
    }

    return false;
  }
}
