// Telegram Bot API service for sending notifications

interface TelegramConfig {
  botToken: string;
  chatId: string; // Channel or group chat ID
}

// You'll need to set these environment variables or update with actual values
const config: TelegramConfig = {
  botToken: process.env.TELEGRAM_BOT_TOKEN || "YOUR_BOT_TOKEN_HERE",
  chatId: process.env.TELEGRAM_CHAT_ID || "@your_channel_name", // or numeric chat ID
};

export class TelegramService {
  private static async sendMessage(
    text: string,
    parseMode?: string,
  ): Promise<boolean> {
    try {
      const url = `https://api.telegram.org/bot${config.botToken}/sendMessage`;

      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: config.chatId,
          text: text,
          parse_mode: parseMode || "HTML",
        }),
      });

      const result = await response.json();
      return result.ok === true;
    } catch (error) {
      console.error("Telegram notification error:", error);
      return false;
    }
  }

  static async notifyGameStarted(
    matchName: string,
    players: string[],
    teamSize: number,
  ): Promise<boolean> {
    const playersText = players.length > 0 ? players.join(", ") : "–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤";

    const message = `
üéÆ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>

üìã <b>–ú–∞—Ç—á:</b> ${matchName}
üë• <b>–§–æ—Ä–º–∞—Ç:</b> ${teamSize}v${teamSize}
üéØ <b>–ò–≥—Ä–æ–∫–∏:</b> ${playersText}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString("ru-RU")}

üî¥ –ú–∞—Ç—á —Å–µ–π—á–∞—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!`;

    return await this.sendMessage(message);
  }

  static async notifyGameFinished(
    matchName: string,
    teamAScore: number,
    teamBScore: number,
    teamA: string[],
    teamB: string[],
  ): Promise<boolean> {
    const winner =
      teamAScore > teamBScore
        ? "–ö–æ–º–∞–Ω–¥–∞ –ê"
        : teamBScore > teamAScore
          ? "–ö–æ–º–∞–Ω–¥–∞ ÔøΩÔøΩ"
          : "–ù–∏—á—å—è";
    const teamAText = teamA.length > 0 ? teamA.join(", ") : "–ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞";
    const teamBText = teamB.length > 0 ? teamB.join(", ") : "–ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞";

    const message = `
üèÜ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìã <b>–ú–∞—Ç—á:</b> ${matchName}
üìä <b>–°—á–µ—Ç:</b> ${teamAScore} : ${teamBScore}
üëë <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b> ${winner}

üë• <b>–ö–æ–º–∞–Ω–¥–∞ –ê:</b> ${teamAText}
üë• <b>–ö–æ–º–∞–Ω–¥–∞ –ë:</b> ${teamBText}

‚è∞ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> ${new Date().toLocaleString("ru-RU")}`;

    return await this.sendMessage(message);
  }

  static async notifyPlayerJoined(
    matchName: string,
    playerName: string,
    currentPlayers: number,
    maxPlayers: number,
  ): Promise<boolean> {
    const message = `
üë§ <b>–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!</b>

üìã <b>–ú–∞—Ç—á:</b> ${matchName}
üéÆ <b>–ò–≥—Ä–æ–∫:</b> ${playerName}
üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> ${currentPlayers}/${maxPlayers}

${currentPlayers >= maxPlayers ? "‚úÖ <b>–ú–∞—Ç—á –∑–∞–ø–æ–ª–Ω–µ–Ω! –ò–≥—Ä–∞ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å—Å—è!</b>" : "‚è≥ –û–∂–∏–¥–∞–µ–º –µ—â–µ –∏–≥—Ä–æ–∫–æ–≤..."}`;

    return await this.sendMessage(message);
  }

  static async testConnection(): Promise<boolean> {
    const message = `
üîß <b>–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!
‚è∞ ${new Date().toLocaleString("ru-RU")}`;

    return await this.sendMessage(message);
  }
}
