// Telegram Bot API service for sending notifications
import { TelegramBotService } from "./telegramBot";
import {
  loadTelegramConfig,
  validateTelegramConfig,
  AppTelegramConfig,
} from "./config/telegramConfig";

interface TelegramConfig {
  botToken: string;
  chatId: string; // Channel or group chat ID
}

// –°—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
const legacyConfig: TelegramConfig = {
  botToken: process.env.TELEGRAM_BOT_TOKEN || "YOUR_BOT_TOKEN_HERE",
  chatId: process.env.TELEGRAM_CHAT_ID || "@your_channel_name",
};

class TelegramServiceClass {
  private botService: TelegramBotService | null = null;
  private config: AppTelegramConfig;

  constructor() {
    this.config = loadTelegramConfig();
    this.initializeBot();
  }

  private initializeBot() {
    const validation = validateTelegramConfig(this.config);

    if (!validation.isValid) {
      console.warn("‚ö†Ô∏è Telegram bot configuration errors:");
      validation.errors.forEach((error) => console.warn(`  - ${error}`));

      if (this.config.token) {
        console.log(
          "üîÑ Attempting to initialize bot with available configuration...",
        );
      } else {
        console.log("‚ùå Cannot initialize bot without token");
        return;
      }
    }

    try {
      this.botService = new TelegramBotService(this.config);
      console.log("‚úÖ TelegramService initialized successfully");
    } catch (error) {
      console.error("‚ùå Failed to initialize TelegramService:", error);
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—Ç–∞—Ä—ã–º API
  private static async sendLegacyMessage(
    text: string,
    parseMode?: string,
  ): Promise<boolean> {
    try {
      const url = `https://api.telegram.org/bot${legacyConfig.botToken}/sendMessage`;

      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: legacyConfig.chatId,
          text: text,
          parse_mode: parseMode || "HTML",
        }),
      });

      const result = await response.json();
      return result.ok === true;
    } catch (error) {
      console.error("Telegram notification error:", error);
      return false;
    }
  }

  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞
  async notifyGameStarted(
    matchName: string,
    players: string[],
    teamSize: number,
  ): Promise<boolean> {
    if (this.botService) {
      return await this.botService.notifyGameStarted(
        matchName,
        players,
        teamSize,
      );
    }

    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
    const playersText = players.length > 0 ? players.join(", ") : "–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤";
    const message = `
üéÆ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>

üìã <b>–ú–∞—Ç—á:</b> ${matchName}
üë• <b>–§–æ—Ä–º–∞—Ç:</b> ${teamSize}v${teamSize}
üéØ <b>–ò–≥—Ä–æ–∫–∏:</b> ${playersText}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString("ru-RU")}

üî¥ –ú–∞—Ç—á —Å–µ–π—á–∞—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!`;

    return await TelegramServiceClass.sendLegacyMessage(message);
  }

  async notifyGameFinished(
    matchName: string,
    teamAScore: number,
    teamBScore: number,
    teamA: string[],
    teamB: string[],
  ): Promise<boolean> {
    if (this.botService) {
      return await this.botService.notifyGameFinished(
        matchName,
        teamAScore,
        teamBScore,
        teamA,
        teamB,
      );
    }

    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
    const winner =
      teamAScore > teamBScore
        ? "–ö–æ–º–∞–Ω–¥–∞ –ê"
        : teamBScore > teamAScore
          ? "–ö–æ–º–∞–Ω–¥–∞ –ë"
          : "–ù–∏—á—å—è";
    const teamAText = teamA.length > 0 ? teamA.join(", ") : "–ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞";
    const teamBText = teamB.length > 0 ? teamB.join(", ") : "–ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞";

    const message = `
üèÜ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìã <b>–ú–∞—Ç—á:</b> ${matchName}
üìä <b>–°—á–µ—Ç:</b> ${teamAScore} : ${teamBScore}
üëë <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b> ${winner}

üë• <b>–ö–æ–º–∞–Ω–¥–∞ –ê:</b> ${teamAText}
üë• <b>–ö–æ–º–∞–Ω–¥–∞ –ë:</b> ${teamBText}

‚è∞ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> ${new Date().toLocaleString("ru-RU")}`;

    return await TelegramServiceClass.sendLegacyMessage(message);
  }

  async notifyPlayerJoined(
    matchName: string,
    playerName: string,
    currentPlayers: number,
    maxPlayers: number,
  ): Promise<boolean> {
    if (this.botService) {
      return await this.botService.notifyPlayerJoined(
        matchName,
        playerName,
        currentPlayers,
        maxPlayers,
      );
    }

    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
    const message = `
üë§ <b>–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!</b>

üìã <b>–ú–∞—Ç—á:</b> ${matchName}
üéÆ <b>–ò–≥—Ä–æ–∫:</b> ${playerName}
üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> ${currentPlayers}/${maxPlayers}

${currentPlayers >= maxPlayers ? "‚úÖ <b>–ú–∞—Ç—á –∑–∞–ø–æ–ª–Ω–µ–Ω! –ò–≥—Ä–∞ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å—Å—è!</b>" : "‚è≥ –û–∂–∏–¥–∞–µ–º –µ—â–µ –∏–≥—Ä–æ–∫–æ–≤..."}`;

    return await TelegramServiceClass.sendLegacyMessage(message);
  }

  async testConnection(): Promise<boolean> {
    if (this.botService) {
      return await this.botService.testConnection();
    }

    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
    const message = `
üîß <b>–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!
‚è∞ ${new Date().toLocaleString("ru-RU")}`;

    return await TelegramServiceClass.sendLegacyMessage(message);
  }

  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
  getBotService(): TelegramBotService | null {
    return this.botService;
  }

  isConnected(): boolean {
    return this.botService?.isConnected() || false;
  }

  updateConfig(newConfig: Partial<AppTelegramConfig>) {
    this.config = { ...this.config, ...newConfig };

    if (this.botService) {
      this.botService.updateConfig(newConfig);
    } else {
      this.initializeBot();
    }
  }

  stopBot() {
    if (this.botService) {
      this.botService.stop();
      this.botService = null;
    }
  }

  restartBot() {
    this.stopBot();
    this.initializeBot();
  }

  getConfig(): AppTelegramConfig {
    return { ...this.config };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
  getWebAppAuthUrl(): string {
    return this.botService?.getWebAppAuthUrl() || "";
  }

  generateAuthCode(telegramUserId: number): string {
    return this.botService?.generateAuthCode(telegramUserId) || "";
  }

  validateAuthCode(telegramUserId: number, code: string): boolean {
    return this.botService?.validateAuthCode(telegramUserId, code) || false;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async sendCustomNotification(
    message: string,
    channel?: "general" | "announcements" | "matches" | "admin",
  ): Promise<boolean> {
    if (this.botService) {
      return await this.botService.sendNotification(message);
    }

    return await TelegramServiceClass.sendLegacyMessage(message);
  }

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  static async notifyGameStarted(
    matchName: string,
    players: string[],
    teamSize: number,
  ): Promise<boolean> {
    return await telegramServiceInstance.notifyGameStarted(
      matchName,
      players,
      teamSize,
    );
  }

  static async notifyGameFinished(
    matchName: string,
    teamAScore: number,
    teamBScore: number,
    teamA: string[],
    teamB: string[],
  ): Promise<boolean> {
    return await telegramServiceInstance.notifyGameFinished(
      matchName,
      teamAScore,
      teamBScore,
      teamA,
      teamB,
    );
  }

  static async notifyPlayerJoined(
    matchName: string,
    playerName: string,
    currentPlayers: number,
    maxPlayers: number,
  ): Promise<boolean> {
    return await telegramServiceInstance.notifyPlayerJoined(
      matchName,
      playerName,
      currentPlayers,
      maxPlayers,
    );
  }

  static async testConnection(): Promise<boolean> {
    return await telegramServiceInstance.testConnection();
  }
}

// –°–æ–∑–¥–∞–µ–º singleton instance
const telegramServiceInstance = new TelegramServiceClass();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton –∫–∞–∫ TelegramService –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const TelegramService = telegramServiceInstance;

// –¢–∞–∫–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
export { TelegramServiceClass };

// –≠–∫—Å–ø–æ—Ä—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
export { loadTelegramConfig, validateTelegramConfig };
export type { AppTelegramConfig };
